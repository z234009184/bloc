<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeMan的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codeman.netlify.app/"/>
  <updated>2020-06-20T08:14:09.033Z</updated>
  <id>https://codeman.netlify.app/</id>
  
  <author>
    <name>CodeMan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Widget Element RenderObject 三者的关系与作用</title>
    <link href="https://codeman.netlify.app/2020/06/20/flutter-widget/"/>
    <id>https://codeman.netlify.app/2020/06/20/flutter-widget/</id>
    <published>2020-06-20T06:26:40.000Z</published>
    <updated>2020-06-20T08:14:09.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h3><ul><li>在Flutter中, 一切皆Widget, Widget是不可变的, 每个Widget状态都代表一帧<br>通俗来说只要页面发生了变化,对应的Widget就一定改变了<br>所以Widget很轻量级</li></ul><h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><ul><li>Widget的加载,生命周期和更新流程;RenderObject的创建、更新等机制;child的加载更新行为, 都是Element实现的<br>所以Element就像是一个控制者一样起到主导作用</li><li>此外Element还保存着Widget的状态信息,从而实现了跨Widget的状态恢复</li><li>因此 <strong>Widget作为配置文件描述如何渲染页面, 多个Widget会组合成 Widget Tree ; 而Element表示 Widget Tree 中特定位置的实例, 多个Element在 mounted(挂载到页面)之后, 会构成一课 Element Tree ; Element只有在 mounted 之后才算激活, 激活之后如果Element存在RenderObject, Element会通过Widget的 createRenderObject 方法创建出对应的RenderObject 并与Element一一对应</strong></li></ul><h3 id="RenderObject"><a href="#RenderObject" class="headerlink" title="RenderObject"></a>RenderObject</h3><ul><li>如果想知道一个Widget的实现逻辑, 只需要找到Widget的RenderObject实现即可, 同时Flutter中自定义控件的实现都绕不开RenderObect</li><li>RenderObject属于真正的绘制实例, 它涉及到了布局layout 和绘制paint等真实的界面操作, 可以认为是真正的View(比如iOS和Android中的View)<br>而它的配置信息如: 颜色, 大小, 位置等, 是通过Widget传递过来的, 所以才会有Widget转化为RenderObject实现绘制的说法</li><li>所有的RenderObject的子类都必须实现paint方法才会实现界面显示, 并且该方法并不是给开发者直接调用的, 需要更新绘制时,必须通过markNeedsPaint方法触发界面进行paint绘制</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>Widget、Element、RenderObject 之间的关系如下:<br>Widget与Element之间是多对一关系; 在存在RenderObject的情况下; Element与RenderObject是一一对应的关系.</li></ul><blockquote><p>如图所示</p></blockquote><p><img src="https://wx1.sbimg.cn/2020/06/20/widget.jpg" alt="widget.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Widget&quot;&gt;&lt;a href=&quot;#Widget&quot; class=&quot;headerlink&quot; title=&quot;Widget&quot;&gt;&lt;/a&gt;Widget&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在Flutter中, 一切皆Widget, Widget是不可变的, 每个Widget状态都代表
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://codeman.netlify.app/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Objective-C 语言底层原理</title>
    <link href="https://codeman.netlify.app/2017/06/20/init_bloc/"/>
    <id>https://codeman.netlify.app/2017/06/20/init_bloc/</id>
    <published>2017-06-20T06:26:40.000Z</published>
    <updated>2020-06-22T04:25:33.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我们平时编写的Objective-C代码，底层实现其实都是C-C-代码"><a href="#我们平时编写的Objective-C代码，底层实现其实都是C-C-代码" class="headerlink" title="我们平时编写的Objective-C代码，底层实现其实都是C\C++代码"></a>我们平时编写的Objective-C代码，底层实现其实都是C\C++代码</h3><ul><li>Objective-C -&gt; C/C++ -&gt; 汇编 -&gt; 机器语言</li><li>所以Objective-C的面向对象都是基于C\C++的数据结构实现的(结构体)</li></ul><h3 id="对象的isa指针指向哪里？"><a href="#对象的isa指针指向哪里？" class="headerlink" title="对象的isa指针指向哪里？"></a>对象的isa指针指向哪里？</h3><ul><li>instance对象的isa指向class对象</li><li>class对象的isa指向meta-class对象</li><li>meta-class对象的isa指向基类的meta-class对象</li></ul><h3 id="OC的类信息存放在哪里？"><a href="#OC的类信息存放在哪里？" class="headerlink" title="OC的类信息存放在哪里？"></a>OC的类信息存放在哪里？</h3><ul><li>成员变量的具体值，存放在instance对象</li><li>对象方法、属性、成员变量、协议信息，存放在class对象中</li><li>类方法，存放在meta-class对象中</li></ul><p><strong>如图所示</strong></p><p><img src="https://wx1.sbimg.cn/2020/06/17/WX20200617-2204452x.png" alt="RUNOOB 图标"></p><h3 id="KVO本质是什么"><a href="#KVO本质是什么" class="headerlink" title="KVO本质是什么?"></a>KVO本质是什么?</h3><ul><li><p>利用RuntimeAPI动态生成一个子类，并且让instance对象的isa指向这个全新的子类</p></li><li><p>当修改instance对象的属性时，会调用Foundation的_NSSetXXXValueAndNotify函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_NSSetXXXValueAndNotify 函数内部大致如下:</span><br><span class="line">willChangeValueForKey:</span><br><span class="line">父类原来的setter</span><br><span class="line">didChangeValueForKey:</span><br><span class="line">内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）</span><br></pre></td></tr></table></figure></li></ul><h3 id="KVC的赋值和取值过程是怎样的？原理是什么？"><a href="#KVC的赋值和取值过程是怎样的？原理是什么？" class="headerlink" title="KVC的赋值和取值过程是怎样的？原理是什么？"></a>KVC的赋值和取值过程是怎样的？原理是什么？</h3><ul><li><img src="https://wx2.sbimg.cn/2020/06/17/WX20200617-2222362x.png" alt="WX20200617-2222362x.png"></li></ul><h3 id="Category的实现原理"><a href="#Category的实现原理" class="headerlink" title="Category的实现原理"></a>Category的实现原理</h3><ul><li>Category编译之后的底层结构是struct category_t，里面存储着分类的对象方法、类方法、属性、协议信息<br>在程序运行的时候，runtime会将Category的数据，合并到类信息中（类对象、元类对象中）, 分类按编译顺序来合并, 后编译的方法属性等会排在列表的前面</li></ul><h3 id="关联对象的本质"><a href="#关联对象的本质" class="headerlink" title="关联对象的本质"></a>关联对象的本质</h3><ul><li>关联对象并不是存储在被关联对象本身内存中<br>关联对象存储在全局的统一的一个AssociationsManager中(全局的字典)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;我们平时编写的Objective-C代码，底层实现其实都是C-C-代码&quot;&gt;&lt;a href=&quot;#我们平时编写的Objective-C代码，底层实现其实都是C-C-代码&quot; class=&quot;headerlink&quot; title=&quot;我们平时编写的Objective-C代码，底
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://codeman.netlify.app/categories/iOS/"/>
    
    
  </entry>
  
</feed>
