<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeMan的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codeman.netlify.app/"/>
  <updated>2020-06-20T08:14:09.033Z</updated>
  <id>https://codeman.netlify.app/</id>
  
  <author>
    <name>CodeMan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Widget Element RenderObject 三者的关系与作用</title>
    <link href="https://codeman.netlify.app/2020/06/20/flutter-widget/"/>
    <id>https://codeman.netlify.app/2020/06/20/flutter-widget/</id>
    <published>2020-06-20T06:26:40.000Z</published>
    <updated>2020-06-20T08:14:09.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h3><ul><li>在Flutter中, 一切皆Widget, Widget是不可变的, 每个Widget状态都代表一帧<br>通俗来说只要页面发生了变化,对应的Widget就一定改变了<br>所以Widget很轻量级</li></ul><h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><ul><li>Widget的加载,生命周期和更新流程;RenderObject的创建、更新等机制;child的加载更新行为, 都是Element实现的<br>所以Element就像是一个控制者一样起到主导作用</li><li>此外Element还保存着Widget的状态信息,从而实现了跨Widget的状态恢复</li><li>因此 <strong>Widget作为配置文件描述如何渲染页面, 多个Widget会组合成 Widget Tree ; 而Element表示 Widget Tree 中特定位置的实例, 多个Element在 mounted(挂载到页面)之后, 会构成一课 Element Tree ; Element只有在 mounted 之后才算激活, 激活之后如果Element存在RenderObject, Element会通过Widget的 createRenderObject 方法创建出对应的RenderObject 并与Element一一对应</strong></li></ul><h3 id="RenderObject"><a href="#RenderObject" class="headerlink" title="RenderObject"></a>RenderObject</h3><ul><li>如果想知道一个Widget的实现逻辑, 只需要找到Widget的RenderObject实现即可, 同时Flutter中自定义控件的实现都绕不开RenderObect</li><li>RenderObject属于真正的绘制实例, 它涉及到了布局layout 和绘制paint等真实的界面操作, 可以认为是真正的View(比如iOS和Android中的View)<br>而它的配置信息如: 颜色, 大小, 位置等, 是通过Widget传递过来的, 所以才会有Widget转化为RenderObject实现绘制的说法</li><li>所有的RenderObject的子类都必须实现paint方法才会实现界面显示, 并且该方法并不是给开发者直接调用的, 需要更新绘制时,必须通过markNeedsPaint方法触发界面进行paint绘制</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>Widget、Element、RenderObject 之间的关系如下:<br>Widget与Element之间是多对一关系; 在存在RenderObject的情况下; Element与RenderObject是一一对应的关系.</li></ul><blockquote><p>如图所示</p></blockquote><p><img src="https://wx1.sbimg.cn/2020/06/20/widget.jpg" alt="widget.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Widget&quot;&gt;&lt;a href=&quot;#Widget&quot; class=&quot;headerlink&quot; title=&quot;Widget&quot;&gt;&lt;/a&gt;Widget&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在Flutter中, 一切皆Widget, Widget是不可变的, 每个Widget状态都代表
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://codeman.netlify.app/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 线程以及线程同步方案</title>
    <link href="https://codeman.netlify.app/2018/06/15/oc-thread/"/>
    <id>https://codeman.netlify.app/2018/06/15/oc-thread/</id>
    <published>2018-06-15T14:00:40.000Z</published>
    <updated>2020-06-28T12:09:58.506Z</updated>
    
    <content type="html"><![CDATA[<h4 id="iOS-中常见的多线程方案"><a href="#iOS-中常见的多线程方案" class="headerlink" title="iOS 中常见的多线程方案"></a>iOS 中常见的多线程方案</h4><p><img src="https://s1.ax1x.com/2020/06/28/N2Xe58.png" alt="N2Xe58.png"></p><h4 id="同步、异步-串行、并发"><a href="#同步、异步-串行、并发" class="headerlink" title="同步、异步, 串行、并发"></a>同步、异步, 串行、并发</h4><ul><li><em>同步</em> 和 <em>异步</em> 主要是能否开启新的线程<ol><li>同步: 在当前线程中执行任务, 不具备开启新线程的能力</li><li>异步: 在新的线程中执行任务, 具备开启新线程的能力</li></ol></li><li><em>串行</em> 和 <em>并发</em> 主要决定任务的执行方式<ol><li>串行: 一个任务执行完毕再执行下一个任务</li><li>并发: 多个任务同时执行</li></ol></li></ul><h4 id="各种情况的执行效果"><a href="#各种情况的执行效果" class="headerlink" title="各种情况的执行效果"></a>各种情况的执行效果</h4><p><img src="https://s1.ax1x.com/2020/06/28/N2v1A0.png" alt="N2v1A0.png"></p><h5 id="队列组的应用"><a href="#队列组的应用" class="headerlink" title="队列组的应用"></a>队列组的应用</h5><blockquote><p>通过dispatch_group_t 队列组可以实现 所有异步任务共同并发, 任务都处理完毕, 统一触发 通过dispatch_group_notify来进行接下来的任务</p></blockquote><h4 id="多线程同步方案"><a href="#多线程同步方案" class="headerlink" title="多线程同步方案"></a>多线程同步方案</h4><ul><li><p><font color=grey>OSSpinLock</font> </p><ul><li><code>#import &lt;libkern/OSAtomic.h&gt;</code></li><li>自旋, 不推荐使用, 会有优先级反转的问题, 如果等待锁的线程优先级较高，它会一直占用着CPU资源，优先级低的线程就无法释放锁</li></ul></li><li><p><font color=blue>os_unfair_lock</font> </p><ul><li>互斥, 推荐效率较高</li><li><code>os_unfair_lock</code>用于取代不安全的<code>OSSpinLock</code> ，从iOS10开始才支持</li></ul></li><li><p><font color=blue>pthread_mutex</font>  </p><ul><li><code>#import &lt;pthread.h&gt;</code></li><li>互斥, 推荐跨平台</li></ul></li><li><p><font color=blue>dispatch_semaphore</font></p><ul><li>互斥, 推荐, 兼容性好</li></ul></li><li><p>dispatch_queue(DISPATCH_QUEUE_SERIAL)</p><ul><li>串行队列同样可以线程同步</li></ul></li><li><p>NSLock</p><ul><li>对pthread_mutex的OC包装</li></ul></li><li><p>NSRecursiveLock</p><ul><li>对pthread_mutex递归锁的OC包装</li></ul></li><li><p>NSCondition</p><ul><li>对pthread_mutex条件锁的OC包装</li></ul></li><li><p>NSConditionLock</p></li><li><p>@synchronized </p><ul><li>对pthread_mutex递归锁的OC包装</li></ul></li></ul><blockquote><p>死锁<br>当线程加锁之后忘记解锁, 那么这把锁就相当于死锁<br> 如果当前加锁采用的是自旋锁方式, 那么就会一直占用着CPU资源,让其他线程处于忙等状态<br> 如果当前加锁采用的是互斥锁方式, 那么就会让再次获取锁的线程处于休眠状态</p></blockquote><h4 id="iOS中的多读单写方案"><a href="#iOS中的多读单写方案" class="headerlink" title="iOS中的多读单写方案"></a>iOS中的多读单写方案</h4><ul><li><p>场景</p><ul><li>同一时间，只能有1个线程进行写的操作</li><li>同一时间，允许有多个线程进行读的操作</li><li>同一时间，不允许既有写的操作，又有读的操作</li></ul></li><li><p>解决方案:</p><ul><li><code>pthread_rwlock</code> 读写锁</li><li><code>dispatch_barrier_async</code> GCD异步栅栏</li></ul></li></ul><h4 id="NSOperationQueue有哪些优点"><a href="#NSOperationQueue有哪些优点" class="headerlink" title="NSOperationQueue有哪些优点?"></a>NSOperationQueue有哪些优点?</h4><details><summary>参考内容</summary><p><strong>1. 可以添加任务依赖, 方便控制执行顺序</strong><br><strong>2. 可以设置任务的优先级</strong><br><strong>3. 可以设置最大并发数</strong><br><strong>2. 可以控制任务执行状态: isReady,isExecuting,isFinished,isCancelled</strong></p></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;iOS-中常见的多线程方案&quot;&gt;&lt;a href=&quot;#iOS-中常见的多线程方案&quot; class=&quot;headerlink&quot; title=&quot;iOS 中常见的多线程方案&quot;&gt;&lt;/a&gt;iOS 中常见的多线程方案&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://codeman.netlify.app/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS RunLoop</title>
    <link href="https://codeman.netlify.app/2018/05/14/oc-runloop/"/>
    <id>https://codeman.netlify.app/2018/05/14/oc-runloop/</id>
    <published>2018-05-14T12:00:00.000Z</published>
    <updated>2020-06-26T02:17:11.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是RunLoop-都有哪些应用范畴"><a href="#什么是RunLoop-都有哪些应用范畴" class="headerlink" title="什么是RunLoop 都有哪些应用范畴"></a>什么是RunLoop 都有哪些应用范畴</h3><ul><li>运行循环, 用来保证程序的持续运行</li><li>用来处理App的各种事件<ul><li>定时器, performSelector</li><li>GCD Async Main Queue</li><li>事件响应, 手势识别, 界面刷新</li><li>网络请求</li><li>AutoReleasePool</li><li>等等…</li></ul></li></ul><h3 id="RunLoop与线程的关系"><a href="#RunLoop与线程的关系" class="headerlink" title="RunLoop与线程的关系"></a>RunLoop与线程的关系</h3><ul><li>每条线程都有一个与之对应的RunLoop对象</li><li>RunLoop保存在一个全局的字典中, 线程作为Key, RunLoop作为Value, 一一对应</li><li>线程刚刚创建的时候没有RunLoop, 当第一次获取RunLoop时会创建</li><li>RunLoop默认情况下会在线程结束时销毁</li><li>主线程的RunLoop会在程序启动时自动获取</li></ul><h3 id="如何获取当前线程的RunLoop"><a href="#如何获取当前线程的RunLoop" class="headerlink" title="如何获取当前线程的RunLoop"></a>如何获取当前线程的RunLoop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F; Foundation </span><br><span class="line">[NSRunLoop currentRunLoop]; &#x2F;&#x2F; 获得当前线程的RunLoop对象</span><br><span class="line">[NSRunLoop mainRunLoop]; &#x2F;&#x2F; 获得主线程的RunLoop对象</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Core Foundation</span><br><span class="line">CFRunLoopGetCurrent(); &#x2F;&#x2F; 获得当前线程的RunLoop对象</span><br><span class="line">CFRunLoopGetMain(); &#x2F;&#x2F; 获得主线程的RunLoop对象</span><br></pre></td></tr></table></figure><h3 id="RunLoop对象结构-以及对外接口"><a href="#RunLoop对象结构-以及对外接口" class="headerlink" title="RunLoop对象结构, 以及对外接口"></a>RunLoop对象结构, 以及对外接口</h3><ul><li>在 CoreFoundation 里面关于 RunLoop 有5个类:<ol><li>CFRunLoopRef</li><li>CFRunLoopModeRef</li><li>CFRunLoopSourceRef</li><li>CFRunLoopTimerRef</li><li>CFRunLoopObserverRef </li></ol></li><li>他们的关系如图所示: </li></ul><p><img src="https://s1.ax1x.com/2020/06/26/NDqPII.jpg" alt="NDqPII.jpg"></p><blockquote><p>一个RunLoop对象包含若干个Mode, 每个Mode包含若干个Source0/Source1/Timers/Observer(统称为 <strong>mode item</strong>)<br>RunLoop启动时只能选择一种mode 作为currentMode<br>如果需要切换Mode, 则需要退出当前Mode, 重新进入新的Mode<br>不同Mode的 Source0/Source1/Timer/Observer 是互相隔离分开的互相不干扰<br>当一个RunLoop中不含任何 Source0/Source1/Timer/Observer 时, RunLoop会立刻退出</p></blockquote><h4 id="RunLoop中常见的Mode"><a href="#RunLoop中常见的Mode" class="headerlink" title="RunLoop中常见的Mode"></a>RunLoop中常见的Mode</h4><ul><li>kCFRunLoopDefaultMode(NSDefaultRunLoopMode):<br>  App的默认mode, 主线程默认情况下在此mode下运行</li><li>UITrackingRunLoopMode: 界面跟踪Mode, 用户ScrollView追踪触摸滑动, 保证界面滑动时不受其他mode影响</li></ul><h3 id="Mode中5个类的解释"><a href="#Mode中5个类的解释" class="headerlink" title="Mode中5个类的解释"></a>Mode中5个类的解释</h3><h4 id="Source0"><a href="#Source0" class="headerlink" title="Source0"></a>Source0</h4><ul><li>触摸事件的处理</li><li>performSelector:onThread:</li></ul><blockquote><p>Source0 只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。</p></blockquote><h4 id="Source1"><a href="#Source1" class="headerlink" title="Source1"></a>Source1</h4><ul><li>基于Port的线程间的通信</li><li>系统事件捕捉<blockquote><p>Source1 包含了一个 mach_port 和一个回调（函数指针），被用于通过内核和其他线程相互发送消息。这种 Source 能主动唤醒 RunLoop 的线程.</p></blockquote></li></ul><h4 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h4><ul><li>NSTimer定时器</li><li>performSelector:withObject:afterDelay:<blockquote><p>是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（函数指针）。当其加入到 RunLoop 时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</p></blockquote></li></ul><h4 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h4><ul><li>用于监听RunLoop的各种状态</li><li>UI刷新</li><li>AutoReleasePool 自动释放池</li><li>Observer监听的状态: <ul><li><code>kCFRunLoopEntry</code> // 即将进入Loop</li><li><code>kCFRunLoopBeforeTimers</code> // 即将处理Timers</li><li><code>kCFRunLoopBeforeSources</code> // 即将处理Sources</li><li><code>kCFRunLoopBeforeWaiting</code> // 即将进入休眠</li><li><code>kCFRunLoopAfterWaiting</code> // 刚从睡眠中唤醒</li><li><code>kCFRunLoopExit</code> // 即将退出RunLoop</li></ul></li></ul><h3 id="RunLoop的运行逻辑"><a href="#RunLoop的运行逻辑" class="headerlink" title="RunLoop的运行逻辑"></a>RunLoop的运行逻辑</h3><p><em>文字版</em></p><ol><li>通知Observers：进入Loop</li><li>通知Observers：即将处理Timers</li><li>通知Observers：即将处理Sources</li><li>处理Blocks</li><li>处理Source0（可能会再次处理Blocks）</li><li>如果存在Source1，就跳转到第8步</li><li>通知Observers：开始休眠（等待消息唤醒）</li><li>通知Observers：结束休眠（被某个消息唤醒）<ol><li>处理Timer</li><li>处理GCD Async To Main Queue</li><li>处理Source1</li></ol></li><li>处理Blocks</li><li>根据前面的执行结果，决定如何操作<ol><li>回到第02步</li><li>退出Loop</li></ol></li><li>通知Observers：退出Loop</li></ol><p><em>图片版</em></p><p><img src="https://s1.ax1x.com/2020/06/26/NDOp4I.png" alt="NDOp4I.png"></p><h4 id="RunLoop的休眠原理"><a href="#RunLoop的休眠原理" class="headerlink" title="RunLoop的休眠原理"></a>RunLoop的休眠原理</h4><ul><li>RunLoop 的核心是基于 mach port 的，其进入休眠时调用的函数是 mach_msg()。 这个函数属于操作系统内核层面的调度, 可以真正的让CPU处于休息状态, 不处理任何指令.</li><li>如图所示:<br><img src="https://s1.ax1x.com/2020/06/26/NDXCdJ.png" alt="NDXCdJ.png"></li></ul><h3 id="苹果用-RunLoop-实现的功能"><a href="#苹果用-RunLoop-实现的功能" class="headerlink" title="苹果用 RunLoop 实现的功能"></a>苹果用 RunLoop 实现的功能</h3><h4 id="苹果所有mode列举"><a href="#苹果所有mode列举" class="headerlink" title="苹果所有mode列举"></a>苹果所有mode列举</h4><p><img src="https://s1.ax1x.com/2020/06/26/NDvjzt.png" alt="NDvjzt.png"></p><h4 id="AutoreleasePool"><a href="#AutoreleasePool" class="headerlink" title="AutoreleasePool"></a>AutoreleasePool</h4><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p><table><thead><tr><th>Observer监听RunLoop状态</th><th>AutoRelease操作</th></tr></thead><tbody><tr><td><code>kCFRunLoopEntry</code> 进入</td><td><code>_objc_autoreleasePoolPush()</code> 入栈</td></tr><tr><td><code>kCFRunLoopBeforeWaiting</code> 即将休眠</td><td><code>_objc_autoreleasePoolPop()</code> <code>_objc_autoreleasePoolPush()</code> 释放旧的池并创建新池</td></tr><tr><td><code>kCFRunLoopExit</code> 即将退出</td><td><code>_objc_autoreleasePoolPop()</code> 出栈</td></tr></tbody></table><blockquote><p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p></blockquote><h4 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h4><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，</p><p>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 _UIApplicationHandleEventQueue() 进行应用内部的分发。</p><p>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p><h4 id="手势识别"><a href="#手势识别" class="headerlink" title="手势识别"></a>手势识别</h4><p>当上面的 _UIApplicationHandleEventQueue() 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p><p>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。</p><p>当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p><h4 id="界面更新"><a href="#界面更新" class="headerlink" title="界面更新"></a>界面更新</h4><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被<strong>标记为待处理</strong>，并被提交到一个全局的容器去。</p><p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p><p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p><p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。</p><p><strong>因此 NSTimer 作为定时器并不是特别的精确</strong><br><strong>CADisplayLink 也只是相对于NSTimer更精确些而已</strong></p><h4 id="PerformSelecter"><a href="#PerformSelecter" class="headerlink" title="PerformSelecter"></a>PerformSelecter</h4><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以<strong>如果当前线程没有 RunLoop，则这个方法会失效</strong>。</p><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，<strong>同样的，如果对应线程没有 RunLoop 该方法也会失效</strong>。</p><h4 id="关于GCD"><a href="#关于GCD" class="headerlink" title="关于GCD"></a>关于GCD</h4><p>实际上 RunLoop 底层也会用到 GCD 的东西, 例如 dispatch_async()。</p><p>当调用 dispatch_async(dispatch_get_main_queue(), block) 时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。</p><h4 id="关于网络请求"><a href="#关于网络请求" class="headerlink" title="关于网络请求"></a>关于网络请求</h4><p>通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 [connection start] 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。CFMultiplexerSource 是负责各种 Delegate 回调的，CFHTTPCookieStorage 是处理各种 Cookie 的。</p><p>另外: AFNetWorking内部单独创建了一个线程，并在这个线程中启动了一个 RunLoop, RunLoop 启动前内部必须要有至少一个 Timer/Observer/Source，所以 AFNetworking 在 [runLoop run] 之前先创建了一个新的 NSMachPort 添加进去了。通常情况下，调用者需要持有这个 NSMachPort (mach_port) 并在外部线程通过这个 port 发送消息到 loop 内；但此处添加 port 只是为了让 RunLoop 不至于退出，并没有用于实际的发送消息。</p><hr><p>参考链接:<br><a href="https://blog.ibireme.com/2015/05/18/runloop/#more-41710" target="_blank" rel="noopener">深入理解RunLoop</a><br><a href="https://ke.qq.com/course/314526" target="_blank" rel="noopener">iOS底层原理讲解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是RunLoop-都有哪些应用范畴&quot;&gt;&lt;a href=&quot;#什么是RunLoop-都有哪些应用范畴&quot; class=&quot;headerlink&quot; title=&quot;什么是RunLoop 都有哪些应用范畴&quot;&gt;&lt;/a&gt;什么是RunLoop 都有哪些应用范畴&lt;/h3&gt;&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="iOS" scheme="https://codeman.netlify.app/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS Runtime</title>
    <link href="https://codeman.netlify.app/2018/04/15/oc-runtime/"/>
    <id>https://codeman.netlify.app/2018/04/15/oc-runtime/</id>
    <published>2018-04-15T14:00:40.000Z</published>
    <updated>2020-06-26T02:17:08.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Runtime"><a href="#什么是Runtime" class="headerlink" title="什么是Runtime"></a>什么是Runtime</h3><ul><li>Objective-C是一门动态性比较强的编程语言，跟C、C++等语言有着很大的不同, 很多操作会推迟到运行时再进行</li><li>OC的动态性就是有Runtime来支撑和实现的, 它是一套C语言API, 封装了很多动态性相关的函数</li><li>平时编写的OC代码底层都是转换成了Runtime API进行调用</li></ul><h3 id="64位CPU架构下的-isa-指针详解"><a href="#64位CPU架构下的-isa-指针详解" class="headerlink" title="64位CPU架构下的 isa 指针详解"></a>64位CPU架构下的 isa 指针详解</h3><ul><li>64位CPU架构之前,isa指针仅仅是存储者当前类对象的地址值</li><li>64位CPU架构下, 对isa进行了优化, 变成了共用体结构, 使用位域操作来存储更多的内容<blockquote><p>如是否有过关联对象, 是否有C++析构函数, 是否有弱引用指向过, 是否正在析构, 引用计数 等等</p></blockquote></li></ul><h3 id="OC的消息机制"><a href="#OC的消息机制" class="headerlink" title="OC的消息机制"></a>OC的消息机制</h3><ul><li><p>OC中的方法, 其实就是给消息接受者发送一条消息, 底层实现是Runtime 的 objc_msgSend() 传入消息的接受者receiver和方法名selector</p></li><li><p>objc_msgSend 底层有三大阶段<br>   1.消息发送(缓存, 当前方法列表, 父类循环查找)<br>   2.动态方法解析(resoveInstanceMethod, 可以动态的添加方法, 如果实现了动态方法解析, 那么会重新走一次消息发送)<br>   3.消息转发 </p><pre><code>`forwardingTargetForSelector``methodSignatureForSelector:``forwardInvocation`</code></pre></li><li><p>流程如下图所示</p><ul><li><p>消息发送<br><img src="https://wx2.sbimg.cn/2020/06/24/image5b82c619bc9ddefc.png" alt="image5b82c619bc9ddefc.png">  </p><br></li><li><p>动态方法解析<br><img src="https://wx1.sbimg.cn/2020/06/24/image4be831b95b960c31.png" alt="image4be831b95b960c31.png"></p><br></li><li><p>消息转发<br><img src="https://wx2.sbimg.cn/2020/06/24/imagea19574eb69c22e47.png" alt="imagea19574eb69c22e47.png"></p><br></li></ul></li></ul><h3 id="super调用的本质"><a href="#super调用的本质" class="headerlink" title="super调用的本质"></a>super调用的本质</h3><ul><li>super的本质是底层的 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objc_msgSendSuper2(</span><br><span class="line">    &#123;self, Class&#125;,</span><br><span class="line">    @selector())</span><br></pre></td></tr></table></figure></li><li>相当于还是当前对象为消息接受者, 只不过消息查找从superclass 中开始查找</li></ul><h3 id="Runtime在实际开发中的应用举例"><a href="#Runtime在实际开发中的应用举例" class="headerlink" title="Runtime在实际开发中的应用举例"></a>Runtime在实际开发中的应用举例</h3><ul><li>查找并不公开的成员变量, 来进行想要的操作,比如通过KVC进行修改, 或获取值</li><li>可以遍历成员变量来进行json转数据实体</li><li>可以进行方法交换来拦截系统或者第三方库中的方法,来进行修改达到想要的操作</li></ul><h4 id="RunTime常用API"><a href="#RunTime常用API" class="headerlink" title="RunTime常用API"></a>RunTime常用API</h4><p><em>类</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 动态创建一个类（参数：父类，类名，额外的内存空间）</span><br><span class="line">Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册一个类（要在类注册之前添加成员变量）</span><br><span class="line">void objc_registerClassPair(Class cls) </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 销毁一个类</span><br><span class="line">void objc_disposeClassPair(Class cls)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取isa指向的Class</span><br><span class="line">Class object_getClass(id obj)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置isa指向的Class</span><br><span class="line">Class object_setClass(id obj, Class cls)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断一个OC对象是否为Class</span><br><span class="line">BOOL object_isClass(id obj)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断一个Class是否为元类</span><br><span class="line">BOOL class_isMetaClass(Class cls)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取父类</span><br><span class="line">Class class_getSuperclass(Class cls)</span><br></pre></td></tr></table></figure><p><em>成员变量</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取一个实例变量信息</span><br><span class="line">Ivar class_getInstanceVariable(Class cls, const char *name)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 拷贝实例变量列表（最后需要调用free释放）</span><br><span class="line">Ivar *class_copyIvarList(Class cls, unsigned int *outCount)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置和获取成员变量的值</span><br><span class="line">void object_setIvar(id obj, Ivar ivar, id value)</span><br><span class="line">id object_getIvar(id obj, Ivar ivar)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 动态添加成员变量（已经注册的类是不能动态添加成员变量的）</span><br><span class="line">BOOL class_addIvar(Class cls, const char * name, size_t size, uint8_t alignment, const char * types)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取成员变量的相关信息</span><br><span class="line">const char *ivar_getName(Ivar v)</span><br><span class="line">const char *ivar_getTypeEncoding(Ivar v)</span><br></pre></td></tr></table></figure><p><em>属性</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取一个属性</span><br><span class="line">objc_property_t class_getProperty(Class cls, const char *name)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 拷贝属性列表（最后需要调用free释放）</span><br><span class="line">objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 动态添加属性</span><br><span class="line">BOOL class_addProperty(Class cls, const char *name, const objc_property_attribute_t *attributes,</span><br><span class="line">                  unsigned int attributeCount)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 动态替换属性</span><br><span class="line">void class_replaceProperty(Class cls, const char *name, const objc_property_attribute_t *attributes,</span><br><span class="line">                      unsigned int attributeCount)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取属性的一些信息</span><br><span class="line">const char *property_getName(objc_property_t property)</span><br><span class="line">const char *property_getAttributes(objc_property_t property)</span><br></pre></td></tr></table></figure><p><em>方法</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获得一个实例方法、类方法</span><br><span class="line">Method class_getInstanceMethod(Class cls, SEL name)</span><br><span class="line">Method class_getClassMethod(Class cls, SEL name)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法实现相关操作</span><br><span class="line">IMP class_getMethodImplementation(Class cls, SEL name) </span><br><span class="line">IMP method_setImplementation(Method m, IMP imp)</span><br><span class="line">void method_exchangeImplementations(Method m1, Method m2) </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 拷贝方法列表（最后需要调用free释放）</span><br><span class="line">Method *class_copyMethodList(Class cls, unsigned int *outCount)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 动态添加方法</span><br><span class="line">BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 动态替换方法</span><br><span class="line">IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取方法的相关信息（带有copy的需要调用free去释放）</span><br><span class="line">SEL method_getName(Method m)</span><br><span class="line">IMP method_getImplementation(Method m)</span><br><span class="line">const char *method_getTypeEncoding(Method m)</span><br><span class="line">unsigned int method_getNumberOfArguments(Method m)</span><br><span class="line">char *method_copyReturnType(Method m)</span><br><span class="line">char *method_copyArgumentType(Method m, unsigned int index)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 选择器相关</span><br><span class="line">const char *sel_getName(SEL sel)</span><br><span class="line">SEL sel_registerName(const char *str)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用block作为方法实现</span><br><span class="line">IMP imp_implementationWithBlock(id block)</span><br><span class="line">id imp_getBlock(IMP anImp)</span><br><span class="line">BOOL imp_removeBlock(IMP anImp)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是Runtime&quot;&gt;&lt;a href=&quot;#什么是Runtime&quot; class=&quot;headerlink&quot; title=&quot;什么是Runtime&quot;&gt;&lt;/a&gt;什么是Runtime&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Objective-C是一门动态性比较强的编程语言，跟C、C++
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://codeman.netlify.app/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Objective-C 语言底层原理</title>
    <link href="https://codeman.netlify.app/2018/03/15/init_bloc/"/>
    <id>https://codeman.netlify.app/2018/03/15/init_bloc/</id>
    <published>2018-03-15T14:26:40.000Z</published>
    <updated>2020-06-24T12:42:19.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我们平时编写的Objective-C代码，底层实现其实都是C-C-代码"><a href="#我们平时编写的Objective-C代码，底层实现其实都是C-C-代码" class="headerlink" title="我们平时编写的Objective-C代码，底层实现其实都是C\C++代码"></a>我们平时编写的Objective-C代码，底层实现其实都是C\C++代码</h3><ul><li>Objective-C -&gt; C/C++ -&gt; 汇编 -&gt; 机器语言</li><li>所以Objective-C的面向对象都是基于C\C++的数据结构实现的(结构体)</li></ul><h3 id="对象的isa指针指向哪里？"><a href="#对象的isa指针指向哪里？" class="headerlink" title="对象的isa指针指向哪里？"></a>对象的isa指针指向哪里？</h3><ul><li>instance对象的isa指向class对象</li><li>class对象的isa指向meta-class对象</li><li>meta-class对象的isa指向基类的meta-class对象</li></ul><h3 id="OC的类信息存放在哪里？"><a href="#OC的类信息存放在哪里？" class="headerlink" title="OC的类信息存放在哪里？"></a>OC的类信息存放在哪里？</h3><ul><li>成员变量的具体值，存放在instance对象</li><li>对象方法、属性、成员变量、协议信息，存放在class对象中</li><li>类方法，存放在meta-class对象中</li></ul><p><strong>如图所示</strong></p><p><img src="https://wx1.sbimg.cn/2020/06/17/WX20200617-2204452x.png" alt="RUNOOB 图标"></p><h3 id="KVO本质是什么"><a href="#KVO本质是什么" class="headerlink" title="KVO本质是什么?"></a>KVO本质是什么?</h3><ul><li><p>利用RuntimeAPI动态生成一个子类，并且让instance对象的isa指向这个全新的子类</p></li><li><p>当修改instance对象的属性时，会调用Foundation的_NSSetXXXValueAndNotify函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_NSSetXXXValueAndNotify 函数内部大致如下:</span><br><span class="line">willChangeValueForKey:</span><br><span class="line">父类原来的setter</span><br><span class="line">didChangeValueForKey:</span><br><span class="line">内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）</span><br></pre></td></tr></table></figure></li></ul><h3 id="KVC的赋值和取值过程是怎样的？原理是什么？"><a href="#KVC的赋值和取值过程是怎样的？原理是什么？" class="headerlink" title="KVC的赋值和取值过程是怎样的？原理是什么？"></a>KVC的赋值和取值过程是怎样的？原理是什么？</h3><ul><li><img src="https://wx2.sbimg.cn/2020/06/17/WX20200617-2222362x.png" alt="WX20200617-2222362x.png"></li></ul><h3 id="Category的实现原理"><a href="#Category的实现原理" class="headerlink" title="Category的实现原理"></a>Category的实现原理</h3><ul><li>Category编译之后的底层结构是struct category_t，里面存储着分类的对象方法、类方法、属性、协议信息<br>在程序运行的时候，runtime会将Category的数据，合并到类信息中（类对象、元类对象中）, 分类按编译顺序来合并, 后编译的方法属性等会排在列表的前面</li></ul><h3 id="关联对象的本质"><a href="#关联对象的本质" class="headerlink" title="关联对象的本质"></a>关联对象的本质</h3><ul><li>关联对象并不是存储在被关联对象本身内存中<br>关联对象存储在全局的统一的一个AssociationsManager中(全局的字典)</li></ul><h3 id="Block的本质"><a href="#Block的本质" class="headerlink" title="Block的本质"></a>Block的本质</h3><ul><li>Block是封装了函数以及函数调用的OC对象<br>其内部构造如图所示:<br><img src="https://wx1.sbimg.cn/2020/06/22/image.png" alt="image.png"></li></ul><h5 id="Block的捕获类型"><a href="#Block的捕获类型" class="headerlink" title="Block的捕获类型"></a>Block的捕获类型</h5><ul><li>auto局部变量是值捕获<br>如果是基本数据类型: 值捕获只会将数值拷贝一份到内部存储<br>如果是对象数据类型: 根据外面对象是否为retain来进行是否retain操作</li><li>static局部静态是引用捕获</li><li>全局变量 不进行捕获</li></ul><h5 id="Block的类型"><a href="#Block的类型" class="headerlink" title="Block的类型"></a>Block的类型</h5><ul><li>默认情况下是NSGlobalBlock</li><li>访问了auto变量为NSStackBlock</li><li>NSStackBlock进行了Copy操作则变成NSMallocBlock</li></ul><h5 id="block-修饰符"><a href="#block-修饰符" class="headerlink" title="__block 修饰符"></a>__block 修饰符</h5><ul><li>会将auto变量进行包装成block内部的 OC对象<br>如果是基本数据类型:Block内部的OC对象内部会拷贝一份外面的数值<br>如果是对象数据类型:Block内部的OC对象内部会对外面的对象根据外面对象是否为retain来进行是否retain操作</li><li>被<strong>block修饰的外部变量 在block内部访问时 本质是通过 Block内部生成的</strong>Block对象内部的forwarding指针指向的自己来进行访问, 主要是解决当Block在栈存储区时,确保访问的外部变量是在堆上</li></ul><h5 id="Block本身的拷贝操作对外面引用变量的影响"><a href="#Block本身的拷贝操作对外面引用变量的影响" class="headerlink" title="Block本身的拷贝操作对外面引用变量的影响"></a>Block本身的拷贝操作对外面引用变量的影响</h5><ul><li>如果Block从栈存储区拷贝的堆存储区则会调用desc结构体内部的copy操作(被__block修饰的同样, 只是多了一层对象包装)</li></ul><h5 id="Block引起的循环引用"><a href="#Block引起的循环引用" class="headerlink" title="Block引起的循环引用"></a>Block引起的循环引用</h5><ul><li>循环引用主要是指外部变量对Block进行多了retain操作, Block内部又对外部变量进行了retain操作, 导致双方的引用计数无法release到0释放, 所以常驻内存导致内存泄漏, 常用的解决方法是将Block内部引用的外部变量进行__weak弱引用, 这样便不会retain操作,可以销毁.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;我们平时编写的Objective-C代码，底层实现其实都是C-C-代码&quot;&gt;&lt;a href=&quot;#我们平时编写的Objective-C代码，底层实现其实都是C-C-代码&quot; class=&quot;headerlink&quot; title=&quot;我们平时编写的Objective-C代码，底
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://codeman.netlify.app/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>博客搬家了</title>
    <link href="https://codeman.netlify.app/2016/05/13/new-bloc/"/>
    <id>https://codeman.netlify.app/2016/05/13/new-bloc/</id>
    <published>2016-05-13T02:26:44.000Z</published>
    <updated>2020-06-28T06:10:49.471Z</updated>
    
    <content type="html"><![CDATA[<p>之前的博客地址<a href="https://home.cnblogs.com/u/zhangguoliang1992" target="_blank" rel="noopener">博客园</a>已不在更新,<br>本博客采用 <code>Hexo</code> + <code>Github Pages</code> + <code>Netlify</code> 搭建</p><h4 id="新博客的目标"><a href="#新博客的目标" class="headerlink" title="新博客的目标"></a>新博客的目标</h4><ul><li>多记录整块的知识体系,而不是分散的知识点</li><li>每个分类或标签下的知识体系可以串联</li></ul><h4 id="博客主攻技术方向"><a href="#博客主攻技术方向" class="headerlink" title="博客主攻技术方向"></a>博客主攻技术方向</h4><ul><li>iOS应用开发, Objective-C、Swift</li><li>跨平台方向</li><li>Android相关(了解), Java</li><li>脚本语言 Shell、Ruby、Python</li><li>Linux 常用命令</li><li>网络</li><li>算法</li><li>数据结构基础、编译原理</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>设计 <code>Pixelmator pro</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的博客地址&lt;a href=&quot;https://home.cnblogs.com/u/zhangguoliang1992&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客园&lt;/a&gt;已不在更新,&lt;br&gt;本博客采用 &lt;code&gt;Hexo&lt;/code&gt; + &lt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
