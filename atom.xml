<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeMan的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codeman.netlify.app/"/>
  <updated>2020-06-17T14:59:15.953Z</updated>
  <id>https://codeman.netlify.app/</id>
  
  <author>
    <name>CodeMan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C 语言底层原理</title>
    <link href="https://codeman.netlify.app/2020/06/16/init_bloc/"/>
    <id>https://codeman.netlify.app/2020/06/16/init_bloc/</id>
    <published>2020-06-16T02:35:22.240Z</published>
    <updated>2020-06-17T14:59:15.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我们平时编写的Objective-C代码，底层实现其实都是C-C-代码"><a href="#我们平时编写的Objective-C代码，底层实现其实都是C-C-代码" class="headerlink" title="我们平时编写的Objective-C代码，底层实现其实都是C\C++代码"></a>我们平时编写的Objective-C代码，底层实现其实都是C\C++代码</h3><ul><li>Objective-C -&gt; C/C++ -&gt; 汇编 -&gt; 机器语言</li><li>所以Objective-C的面向对象都是基于C\C++的数据结构实现的(结构体)</li></ul><h3 id="对象的isa指针指向哪里？"><a href="#对象的isa指针指向哪里？" class="headerlink" title="对象的isa指针指向哪里？"></a>对象的isa指针指向哪里？</h3><ul><li>instance对象的isa指向class对象</li><li>class对象的isa指向meta-class对象</li><li>meta-class对象的isa指向基类的meta-class对象</li></ul><h3 id="OC的类信息存放在哪里？"><a href="#OC的类信息存放在哪里？" class="headerlink" title="OC的类信息存放在哪里？"></a>OC的类信息存放在哪里？</h3><ul><li>成员变量的具体值，存放在instance对象</li><li>对象方法、属性、成员变量、协议信息，存放在class对象中</li><li>类方法，存放在meta-class对象中</li></ul><p><strong>如图所示</strong></p><p><img src="https://wx1.sbimg.cn/2020/06/17/WX20200617-2204452x.png" alt="RUNOOB 图标"></p><h3 id="KVO本质是什么"><a href="#KVO本质是什么" class="headerlink" title="KVO本质是什么?"></a>KVO本质是什么?</h3><ul><li><p>利用RuntimeAPI动态生成一个子类，并且让instance对象的isa指向这个全新的子类</p></li><li><p>当修改instance对象的属性时，会调用Foundation的_NSSetXXXValueAndNotify函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_NSSetXXXValueAndNotify 函数内部大致如下:</span><br><span class="line">willChangeValueForKey:</span><br><span class="line">父类原来的setter</span><br><span class="line">didChangeValueForKey:</span><br><span class="line">内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）</span><br></pre></td></tr></table></figure></li></ul><h3 id="KVC的赋值和取值过程是怎样的？原理是什么？"><a href="#KVC的赋值和取值过程是怎样的？原理是什么？" class="headerlink" title="KVC的赋值和取值过程是怎样的？原理是什么？"></a>KVC的赋值和取值过程是怎样的？原理是什么？</h3><ul><li><img src="https://wx2.sbimg.cn/2020/06/17/WX20200617-2222362x.png" alt="WX20200617-2222362x.png"></li></ul><h3 id="Category的实现原理"><a href="#Category的实现原理" class="headerlink" title="Category的实现原理"></a>Category的实现原理</h3><ul><li>Category编译之后的底层结构是struct category_t，里面存储着分类的对象方法、类方法、属性、协议信息<br>在程序运行的时候，runtime会将Category的数据，合并到类信息中（类对象、元类对象中）, 分类按编译顺序来合并, 后编译的方法属性等会排在列表的前面</li></ul><h3 id="关联对象的本质"><a href="#关联对象的本质" class="headerlink" title="关联对象的本质"></a>关联对象的本质</h3><ul><li>关联对象并不是存储在被关联对象本身内存中<br>关联对象存储在全局的统一的一个AssociationsManager中(全局的字典)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;我们平时编写的Objective-C代码，底层实现其实都是C-C-代码&quot;&gt;&lt;a href=&quot;#我们平时编写的Objective-C代码，底层实现其实都是C-C-代码&quot; class=&quot;headerlink&quot; title=&quot;我们平时编写的Objective-C代码，底
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://codeman.netlify.app/categories/iOS/"/>
    
    
  </entry>
  
</feed>
